/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface CounterERC2771Interface extends Interface {
  getFunction(
    nameOrSignature: "contextCounter" | "increment" | "isTrustedForwarder"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "IncrementCounter"): EventFragment;

  encodeFunctionData(
    functionFragment: "contextCounter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "increment", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "contextCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "increment", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
}

export namespace IncrementCounterEvent {
  export type InputTuple = [_msgSender: AddressLike];
  export type OutputTuple = [_msgSender: string];
  export interface OutputObject {
    _msgSender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CounterERC2771 extends BaseContract {
  connect(runner?: ContractRunner | null): CounterERC2771;
  waitForDeployment(): Promise<this>;

  interface: CounterERC2771Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  contextCounter: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  increment: TypedContractMethod<[], [void], "nonpayable">;

  isTrustedForwarder: TypedContractMethod<
    [forwarder: AddressLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "contextCounter"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "increment"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isTrustedForwarder"
  ): TypedContractMethod<[forwarder: AddressLike], [boolean], "view">;

  getEvent(
    key: "IncrementCounter"
  ): TypedContractEvent<
    IncrementCounterEvent.InputTuple,
    IncrementCounterEvent.OutputTuple,
    IncrementCounterEvent.OutputObject
  >;

  filters: {
    "IncrementCounter(address)": TypedContractEvent<
      IncrementCounterEvent.InputTuple,
      IncrementCounterEvent.OutputTuple,
      IncrementCounterEvent.OutputObject
    >;
    IncrementCounter: TypedContractEvent<
      IncrementCounterEvent.InputTuple,
      IncrementCounterEvent.OutputTuple,
      IncrementCounterEvent.OutputObject
    >;
  };
}
